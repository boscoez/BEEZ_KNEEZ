{"ast":null,"code":"// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport const register = config => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            console.log('Content is cached for offline use.');\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n};","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/home/jmj/pj2024/myportfolio-app/src/serviceWorker.ts"],"sourcesContent":["// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        window.location.hostname === '[::1]' ||\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport const register = (config?: Config): void => {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            return\r\n        }\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n            if (isLocalhost) {\r\n                checkValidServiceWorker(swUrl, config)\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA')\r\n                })\r\n            } else {\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.')\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            console.log('Content is cached for offline use.')\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then((response) => {\r\n            const contentType = response.headers.get('content-type')\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.')\r\n        })\r\n}\r\n\r\nexport const unregister = (): void => {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister()\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}